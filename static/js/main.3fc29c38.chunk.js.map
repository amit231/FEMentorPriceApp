{"version":3,"sources":["components/ToggleButton/ToggleButton.js","App.js","utulities/useWindowSize.js","index.js"],"names":["ToggleSwitch","props","className","id","type","onChange","e","valChange","val","App","useState","setVal","isMonthly","setIsMonthly","useEffect","document","getElementById","oninput","value","this","min","max","style","background","spanPay","temp","pageViews","calc","price","views","size","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","discText","console","log","class","step","target","ToggleButton","ReactDOM","render"],"mappings":"yOAceA,MAZf,SAAsBC,GAIlB,OACI,wBAAOC,UAAU,SAAjB,UACI,uBAAOC,GAAG,QAAQC,KAAK,WAAWC,SAAU,SAAAC,GAJhDL,EAAMM,WAAWN,EAAMO,QAKnB,qBAAKN,UAAU,cCmFZO,MAxFf,WAAgB,IAAD,EAESC,mBAAS,GAFlB,mBAENF,EAFM,KAEDG,EAFC,OAGqBD,oBAAS,GAH9B,mBAGNE,EAHM,KAGKC,EAHL,KAIbC,qBAAU,WACRC,SAASC,eAAe,WAAWC,QAAU,WAC3C,IAAIC,GAASC,KAAKD,MAAQC,KAAKC,MAAQD,KAAKE,IAAMF,KAAKC,KAAO,IAC9DD,KAAKG,MAAMC,WAAa,iDAAmDL,EAAQ,WAAaA,EAAQ,gCAEzG,IACH,IAiCIM,EAAU,QACTZ,IACHY,EAAU,QA7CC,MAUF,WACT,IAAIC,EACAC,GACO,GAAPlB,IACFiB,EAAO,EACPC,EAAY,OAEH,GAAPlB,IACFiB,EAAO,GACPC,EAAY,OAGH,GAAPlB,IACFiB,EAAO,GACPC,EAAY,QAGH,GAAPlB,IACFiB,EAAO,GACPC,EAAY,QAGH,GAAPlB,IACFiB,EAAO,GACPC,EAAY,MAGTd,KAEHa,GADQ,IAAOA,GAGjB,MAAO,CAACA,EAAMC,GAMKC,GA/CR,mBA+CRC,EA/CQ,KA+CDC,EA/CC,KAgDPC,EClDO,WAAyB,MAGApB,mBAAS,CACzCqB,WAAOC,EACPC,YAAQD,IALwB,mBAG7BE,EAH6B,KAGjBC,EAHiB,KA4BpC,OApBArB,qBAAU,WAEN,SAASsB,IAELD,EAAc,CACVJ,MAAOM,OAAOC,WACdL,OAAQI,OAAOE,cAWvB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IAEIF,EDsBIQ,GACTC,EAAW,eAMf,OALIb,EAAKC,MAAQ,MACfY,EAAW,QAGbC,QAAQC,IAAIf,GAEV,sBAAK5B,UAAW,aAAhB,UACE,qBAAKA,UAAU,WACf,sBAAK4C,MAAM,UAAX,UACE,sBAAM5C,UAAU,eAAhB,2CACA,sBAAM4C,MAAM,cAAZ,uEAEF,sBAAK5C,UAAW,OAAhB,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAMA,UAAW,QAAjB,UAA2B2B,EAA3B,gBACA,uBAAM3B,UAAW,cAAjB,cAAiC,uBAAMA,UAAW,QAAjB,cAA4B0B,KAA7D,IAA4EJ,QAE9E,qBAAKtB,UAAU,aAAf,SACE,uBAAOC,GAAG,UAAUC,KAAK,QAAQiB,IAAI,IAAID,IAAI,IAAIF,MAAOV,EAAKN,UAAU,aAAa6C,KAAK,IAAI1C,SAAU,SAACC,GAAD,OAAOK,EAAOL,EAAE0C,OAAO9B,YAGhI,sBAAKhB,UAAU,aAAf,UACE,sBAAMA,UAAW,iBAAjB,6BACA,cAAC+C,EAAD,CAAc/C,UAAU,SAASM,IAAKI,EAAWL,UAAWM,IAC5D,sBAAMX,UAAW,eAAjB,4BACA,sBAAMA,UAAW,eAAjB,SAAkCyC,OAEpC,qBAAIzC,UAAW,OAAf,UACE,oDACA,sDACA,kDAEF,wBAAQA,UAAW,WAAnB,mCEjFRgD,IAASC,OACL,cAAC,EAAD,IACFpC,SAASC,eAAe,W","file":"static/js/main.3fc29c38.chunk.js","sourcesContent":["import React from 'react'\nimport './ToggleSwitch.css'\nfunction ToggleSwitch(props) {\n    let valChanged = () => {\n        props.valChange(!props.val)\n    }\n    return (\n        <label className=\"switch\">\n            <input id=\"check\" type=\"checkbox\" onChange={e => valChanged(e)} />\n            <div className=\"thumb\"></div>\n        </label>\n    )\n}\n\nexport default ToggleSwitch\n","import React, { useState, useEffect } from 'react'\nimport \"./App.css\";\nimport ToggleButton from \"./components/ToggleButton/ToggleButton\";\nimport useWindowSize from './utulities/useWindowSize'\nfunction App() {\n\n  const [val, setVal] = useState(5);\n  const [isMonthly, setIsMonthly] = useState(true)\n  useEffect(() => {\n    document.getElementById(\"myinput\").oninput = function () {\n      var value = (this.value - this.min) / (this.max - this.min) * 100\n      this.style.background = 'linear-gradient(to right, #82CFD0 0%, #82CFD0 ' + value + '%, #fff ' + value + '%, hsl(13, 15%, 88%) 100%)'\n    };\n  }, [])\n  let calc = () => {\n    let temp;\n    let pageViews;\n    if (val == 1) {\n      temp = 8;\n      pageViews = '10K';\n    }\n    if (val == 2) {\n      temp = 12;\n      pageViews = '50K';\n\n    }\n    if (val == 3) {\n      temp = 16;\n      pageViews = '100K';\n\n    }\n    if (val == 4) {\n      temp = 24;\n      pageViews = '500K';\n\n    }\n    if (val == 5) {\n      temp = 36;\n      pageViews = '1M';\n\n    }\n    if (!isMonthly) {\n      let a = 0.25 * temp;\n      temp -= a;\n    }\n    return [temp, pageViews];\n  }\n  let spanPay = 'month';\n  if (!isMonthly) {\n    spanPay = 'year'\n  }\n  let [price, views] = calc();\n  const size = useWindowSize();\n  let discText = '25% discount';\n  if (size.width < 900) {\n    discText = '-25%';\n  }\n\n  console.log(size)\n  return (\n    <div className={\"background\"}>\n      <div className=\"imgDiv\"></div>\n      <div class='heading'>\n        <span className=\"heading-main\">Simple, traffic-based pricing</span>\n        <span class=\"heading-sub\">Sign-up for our 30-day trial. No credit card required.</span>\n      </div>\n      <div className={\"main\"}>\n        <div className=\"upperStrip\">\n          <span className={\"views\"}>{views} PAGEVIEWS</span>\n          <span className={\"r1 tinyText\"}> <span className={\"price\"}>${price}</span>/{spanPay}</span>\n        </div>\n        <div className='sliderCont'>\n          <input id='myinput' type=\"range\" max=\"5\" min=\"1\" value={val} className=\"pro-slider\" step='1' onChange={(e) => setVal(e.target.value)} />\n        </div>\n\n        <div className=\"lowerStrip\">\n          <span className={\"month tinyText\"}>Monthly Billing</span>\n          <ToggleButton className=\"switch\" val={isMonthly} valChange={setIsMonthly} />\n          <span className={\"r31 tinyText\"}>Yearly billing</span>\n          <span className={\"discountText\"}>{discText}</span>\n        </div>\n        <ul className={\"list\"}>\n          <li>Unlimited websites</li>\n          <li>100% data ownership </li>\n          <li>Email reports</li>\n        </ul>\n        <button className={\"startBtn\"}>Start my trial</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}